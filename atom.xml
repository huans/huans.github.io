<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huan&#39;s blog</title>
  
  <subtitle>若说人生的意义，那就是对人类精神和知识的承上启下。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huans.github.io/"/>
  <updated>2019-11-05T13:19:54.100Z</updated>
  <id>https://huans.github.io/</id>
  
  <author>
    <name>Huan Si</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sentieon——更具效率的变异检测软件</title>
    <link href="https://huans.github.io/2019/11/05/sentieon/"/>
    <id>https://huans.github.io/2019/11/05/sentieon/</id>
    <published>2019-11-05T13:11:40.354Z</published>
    <updated>2019-11-05T13:19:54.100Z</updated>
    
    <content type="html"><![CDATA[<p>目前在全基因组范围内做variants calling的软件还是GATK，Samtools为主，我之前的工作基本上属于这两个都用一点，昨天需要跑一批数据的时候发现GATK更新了，很多命令和参数都有了改变，觉得再去看manual就很麻烦，反正都是看不如就学习一下最近非常火的sentieon。<a id="more"></a><br>sentieon是一款商业软件（据说价格很贵），相比于目前主流的软件，它的主要特点就是 <strong>快</strong>、<strong>准</strong>。<br>相比于GATK，sentieon用的和GATK一样的数学模型，不一样的是对算法进行了改进，用sentieon的结果和GATK一样，而速度据说能比GATK快20-50倍。<br>因为我们实验室购买了这个软件，也都全部安装配置到服务器上可以直接调用，下面就贴一下我使用过程中的脚本，十分感谢杨庆勇老师在群里的无私分享。<br>因为样本比较多，所以我是通过批量提交作业的方法进行的。</p><p>#batch_run.lsf</p><pre><code> #BSUB -J sentieon    #BSUB -n 1    #BSUB -R span[hosts=1]    #BSUB -o %J.out    #BSUB -e %J.errfor sample in ./SRR*_2.fastq.gz        do        sh sentieon.sh ${sample} &amp;         sleep 1donewait</code></pre><p>#sentieon.sh</p><pre><code>#!/bin/sh#样本名称sample=$1i=$(basename $sample |sed &apos;s/_2.fastq.gz//&apos;)# 加载所需软件module load sentieon/201808.07export SENTIEON_LICENSE=mn01:9000module load SAMtools/1.9release_dir=/public/home/software/opt/bio/software/Sentieon/201808.07# fastq文件路径fq1=${i}_1.fastq.gzfq2=${i}_2.fastq.gz# 参考基因组文件fasta=xxx.fasta# 输出文件路径workdir=`pwd`/sentieon_result# 需要使用的核心数nt=10# 比对信息group_prefix=&quot;read_group_name&quot;platform=&quot;ILLUMINA&quot;mq=30[ ! -d $workdir ] &amp;&amp; mkdir -p $workdircd $workdir# 输出文件rawCram=$i.cramsortedCram=$i.q$mq.sorted.cramdepCram=$i.deduped.cramrealnCram=$i.realn.cramoutvcf=$i.sentieon.vcfexec &gt; $workdir/$i.callVCF.log 2&gt;&amp;1 # call vcf的日志文件# ******************************************# 1. 利用 BWA-MEM 进行比对并排序# ******************************************bsub -K -J Sentieon -n 10 -o %J.out -e %J.err -R span[hosts=1] &quot;( $release_dir/bin/sentieon bwa mem -M -R \&quot;@RG\tID:${i}\tSM:${i}\tPL:$platform\&quot; \-t $nt -K 10000000 $fasta $fq1 $fq2 || echo -n &apos;error&apos; ) | samtools sort -@ $nt  --output-fmt CRAM \--reference $fasta -o $rawCram - &amp;&amp; samtools index -@ $nt $rawCram samtools view -hCS -T $fasta -q $mq -o $sortedCram $rawCram &amp;&amp; \samtools index -@ $nt $sortedCramsamtools flagstat $rawCram &gt; $i.stat.raw.txt &amp;&amp; \samtools flagstat $sortedCram &gt; $i.stat.q$mq.txt &amp;# ******************************************# 2. Calculate data metrics# ******************************************$release_dir/bin/sentieon driver -r $fasta -t $nt -i $sortedCram --algo MeanQualityByCycle ${i}_mq_metrics.txt \--algo QualDistribution ${i}_qd_metrics.txt --algo GCBias --summary ${i}_gc_summary.txt ${i}_gc_metrics.txt \--algo AlignmentStat --adapter_seq &apos;&apos; ${i}_aln_metrics.txt --algo InsertSizeMetricAlgo ${i}_is_metrics.txt$release_dir/bin/sentieon plot metrics -o ${i}_metrics-report.pdf gc=${i}_gc_metrics.txt \qd=${i}_qd_metrics.txt mq=${i}_mq_metrics.txt isize=${i}_is_metrics.txt$release_dir/bin/sentieon driver -r $fasta -t $nt -i $sortedCram --algo LocusCollector --fun score_info ${i}_score.txt# ******************************************# 3. 去除 Duplicate Reads# ******************************************$release_dir/bin/sentieon driver -r $fasta -t $nt -i $sortedCram --algo Dedup --rmdup --cram_write_options version=3.0 \--score_info ${i}_score.txt --metrics ${i}_dedup_metrics.txt $depCram &amp;&amp; rm -f $sortedCram# ******************************************# 4. Indel 重排序 (可选)# 如果只需要最终的比对结果文件，到这里就可以了，这条命令下面的命令都可以注释掉# ******************************************$release_dir/bin/sentieon driver -r $fasta -t $nt -i $depCram --algo Realigner --cram_write_options version=3.0 \$realnCram &amp;&amp; rm -f $depCram# ******************************************# 5. Variant calling# ******************************************$release_dir/bin/sentieon driver -t $nt -r $fasta -i $realnCram --algo Genotyper $outvcf&quot;</code></pre><p>需要注意的是在这个地方：</p><blockquote><p>bsub -K -J Sentieon -n 10 -o %J.out -e %J.err -R span[hosts=1] “( $release_dir/bin/sentieon bwa mem -M -R \”@RG\tID:${i}\tSM:${i}\tPL:$platform\”<br>用了”\”转义了头文件参数的两个引号，否则在执行的时候会因为提交作业命令后的引号（第一个）而引起不能识别-R后面的参数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前在全基因组范围内做variants calling的软件还是GATK，Samtools为主，我之前的工作基本上属于这两个都用一点，昨天需要跑一批数据的时候发现GATK更新了，很多命令和参数都有了改变，觉得再去看manual就很麻烦，反正都是看不如就学习一下最近非常火的sentieon。
    
    </summary>
    
    
      <category term="sentieon GATK variants-calling" scheme="https://huans.github.io/tags/sentieon-GATK-variants-calling/"/>
    
  </entry>
  
  <entry>
    <title>群体遗传π值和XP-CLR计算</title>
    <link href="https://huans.github.io/2019/11/04/XP-CLR/"/>
    <id>https://huans.github.io/2019/11/04/XP-CLR/</id>
    <published>2019-11-04T14:45:08.620Z</published>
    <updated>2019-11-04T15:57:06.060Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有写过博客了，看见二师兄在群里征集课题组网站的资料我也方然想起来自己曾经也花了很多时间建立的一个博客，既然是心血，那就还是要继续督促自己写下去。<a id="more"></a></p><p>今天所记和分享的的是关于群体基因组学方面的一些知识，也是最近在忙着学习的东西，顺便做一下记录，如果能帮助后来者，那就是有意义的事，具体的定义不再赘述，主要记录一些过程，望理解。</p><p>物种的驯化和改良过程，特别是农作物和家养动物（不知是否表述专业）伴随着人类的出现一直延续至今，如何在基因组层面定义驯化的现象，许多的研究采用了多种不同的方法来解释，群体间分化指数Fst，核苷酸多样性π，以及跨种群复合似然比XP-CLR等。接下来就具体讲一下XP-CLR值和π怎么去算，以及过程中我踩到的坑。</p><h2 id="π值"><a href="#π值" class="headerlink" title="π值"></a>π值</h2><p>这个值在文章中用的也很多了，大概瞄了一下，计算起来也非常简单，我的理解含义是在给定基因组区间内分别计算两个群体的π值，越大说明核苷酸多样性越高，最后求得群体间比值，以一定的阈值去筛选，确定候选区域。</p><p>Vcftools可以轻松完成这个工作</p><pre><code>vcftools --vcf test.vcf --window-pi 500000 --out pi</code></pre><p>参数非常简单，相信不必赘述。在我写这篇博客的时候，我的结果还没出来，对于结果文件的解读后期补上。<br>在过程中我消耗了一点时间的地方其实是在准备Vcf文件的过程，之前用GATK做SNP calling是用的GATK3.8，然而目前GATK更新到4，与以前的版本相比用法做了很大改变，这一点需要注意。</p><h2 id="XP-CLR"><a href="#XP-CLR" class="headerlink" title="XP-CLR"></a>XP-CLR</h2><p>其实这个值目前在很多文章中与π值方法一起用降低假阳性。<br>usage: </p><pre><code>xpclr [-h] --out OUT [--format FORMAT] [--input INPUT][--gdistkey GDISTKEY] [--samplesA SAMPLESA] [--samplesB SAMPLESB][--rrate RRATE] [--map MAP] [--popA POPA] [--popB POPB] --chrCHROM [--ld LDCUTOFF] [--phased] [--verbose VERBOSE][--maxsnps MAXSNPS] [--minsnps MINSNPS] [--size SIZE][--start START] [--stop STOP] [--step STEP]</code></pre><p>主要用到的参数：<br>    –out 输出文件<br>    –format 输入文件的格式，可以使vcf 和hdf5和 txt格式，具体要求参考：<a href="https://github.com/hardingnj/xpclr" target="_blank" rel="noopener">https://github.com/hardingnj/xpclr</a><br>    –samplesA 群体A中的材料名称<br>    –samplesB 群体B中的材料名称<br>    –size 计算窗口<br>    –step 步移距离</p><p>usage: xpclr [-h] –out OUT [–format FORMAT] [–input INPUT]<br>[–gdistkey GDISTKEY] [–samplesA SAMPLESA] [–samplesB SAMPLESB]<br>[–rrate RRATE] [–map MAP] [–popA POPA] [–popB POPB] –chr<br>CHROM [–ld LDCUTOFF] [–phased] [–verbose VERBOSE]<br>[–maxsnps MAXSNPS] [–minsnps MINSNPS] [–size SIZE]<br>[–start START] [–stop STOP] [–step STEP]</p><p>用法非常简单，需要注意的是如果对多个样品的vcf文件进行分析，vcf应当是一个合并后的文件，如何合并参考vcftools。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没有写过博客了，看见二师兄在群里征集课题组网站的资料我也方然想起来自己曾经也花了很多时间建立的一个博客，既然是心血，那就还是要继续督促自己写下去。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《花漾年华》</title>
    <link href="https://huans.github.io/2019/11/04/%E8%8A%B1%E6%BC%BE%E5%B9%B4%E5%8D%8E/"/>
    <id>https://huans.github.io/2019/11/04/花漾年华/</id>
    <published>2019-11-04T14:28:32.017Z</published>
    <updated>2019-11-04T14:44:28.705Z</updated>
    
    <content type="html"><![CDATA[<p>尽管近来烦心事颇多，文章的事，实验的事，公共事务以及一些其他事情，感觉自己又瘦了一些。恰逢枝江市剧团到华农演出，而演出的内容是新编黄梅戏《花漾年华》。百忙之中抽了一个半小时时间去看了。<a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;坦白说，对于戏剧的认识仅限于知道一些戏种，可能“戏种”这个词都是我编造的，事实上并不存在，所以我也可以说我完全不了解戏剧这门艺术，所以我要一整场都不时地瞄一眼字幕，弄清楚她们在唱什么。但是艺术不论以什么样的形式呈现出来，最重要的还是它的感染力，舞台上每一个演员的动作和表情都会是感染观众，从而达到舞台效果甚至社会影响所不可缺少的。这样的一台剧对于我们农大学生，特别是对于我们肩负中国未来农业发展和粮食安全的这样一群人来说是非常值得思考的。我也很有兴趣在花了一个半小时之后，再花一个半小时来消化它。没什么逻辑，记心中所想罢了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这台剧主要讲述一位华农毕业女大学生李文英在毕业后，在自己最美好的年纪，扎根基层，数十年如一日，为广大枝江地区棉农做农技推广，选育高抗高产棉花新品种，解决枯萎病和黄萎病这两大棉花生产中的巨大问题，为此她也忽视了自己的家庭，甚至在丈夫逝世前三天才得知其身患癌症的消息，对于李文英来说，这是不幸，但丈夫对她工作的支持也是最能宽慰她的事情了，好在我们知晓了她的故事，好在有越来越多的人知晓了她的故事，而这样的故事会被许多人铭记也同时激励着很多人。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就我个人而言，不论是在西大学习期间所领悟的袁先生关于顶天立地，服务三农的谆谆教诲，还是在华农上学所体会到的华农人脚踏实地和朴实无华，这都是我需要印刻在自己品格上的标签。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;犹记得新生第一课是李加纳教授授课，那是我第一次认识到我们的农业生产的大致局面，认识到农业不能只是靠肩挑背扛，不能总是小农经济占主导，我们的国家，我们国家广大农民群众需要我们搞机械化，搞信息化，搞设施农业，搞精准农业，这也要求我们要从农业生产的源头——农业科研上下足功夫。分子标记辅助选择育种，转基因育种，诱变育种这都是我们那一批人在这个课堂上第一次听到的新鲜词语。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本科毕业，选择了华农作为我求学的第二站，同学大都不是很理解。很顺利地到了华农，进了GCGI，记得面试时候老板问我你想做什么工作，我说我想下地，想做常规育种，不想做分子生物学。老师是比较惊讶的，大多数孩子怕日晒雨淋，在实验做做分子实验会是个不错的选择。当然了，最后是没让我去，后来我也渐渐理解了老师，现在回想当时也太年轻。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;书读到这里，也差不多快到头了，不知道以后是不是还有当初那样的冲劲是不是可以沉得下心来做事情。联想自己现在做的事情和今天的看戏的感悟，我会觉得我们的农业科研过于急功近利，我们的研究生培养可能出了一些问题，农业领域需要尖端人才，需要生物信息学，需要结构生物学，但也需要传统的育种家和农艺师，就像戏中李文英那样的人物。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自古以来，农业本来是一个很接地气的行业，但是随着社会发展，我们这些从业者们似乎很急于摆脱那顶别人眼中关于农业很土很落后的帽子，导致我们的科学研究有点像无根之木，导致我们的科学家和我们的科研工作者们和真正的农业生产脱节了，研究没有完全切实立足于农民的需要。当然，基础研究也非常重要，但我想我们应该重新评估和平衡一下这部分和应用研究所分别占的比例。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;家庭联产承包责任制让我们的农村重新焕发了生机和活力，但是我们很清楚中国的农业发展事实上还是比较落后，除了部分地区正在逐步推广和完善机械化和规模化，我们真正的落后地区，农业生产还是很落后，三农问题还是很突出。小农思想依然存在，在这样的具体国情下，农业推广始终不是一个简单的事情，即便我们有了良种，有了良法，我们怎么通过政策之外的方法去让农民接受。这是我们农业推广战线上的所有人需要考虑的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一二三产业本身是各具特点，但是在产业发展不平衡的今天，我们长期依赖的第一产业已经失去了原有的地位，极低的产业附加值极大地阻碍了资本进入，在失去原有从业者的同时对潜在从业者也没有任何吸引力，开玩笑地说，李文英式人物的出现可能有一天只能用情怀来解释。那么需要多少人的情怀才能支撑一个产业呢？解决这样的问题，我们需要一批真正热爱三农的科研人员和科技推广服务人员，需要一批有志于改善农民生活，提升农村环境，促进农业发展的李文英式人物，除了理想和信念，你找不到什么理由让足够多的人从大城市去到农村做这样的坚持，这样的坚持很难，因为它把一切都寄托在个人追求上。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很遗憾，在目前这样的产业背景下，我们很难用难以拒绝的待遇去吸引愿意扎根基层的同志。我们似乎只能理解是信念支撑着李文英的坚持，数十年扎根农村，退休后还不愿放弃。但我们也能看到李文英最初是追随者爱情的脚步来到了枝江，从此扎根于此，在几十年的工作中丈夫和女儿给了她莫大的支持。所以即使她只有信念，至少她还有郑荣棣，那么你呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2018.6.25 于武汉狮子山</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管近来烦心事颇多，文章的事，实验的事，公共事务以及一些其他事情，感觉自己又瘦了一些。恰逢枝江市剧团到华农演出，而演出的内容是新编黄梅戏《花漾年华》。百忙之中抽了一个半小时时间去看了。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>转录组分析之--利用DESeq2进行差异基因的筛选</title>
    <link href="https://huans.github.io/2019/11/04/DESEQ2/"/>
    <id>https://huans.github.io/2019/11/04/DESEQ2/</id>
    <published>2019-11-04T14:22:29.401Z</published>
    <updated>2019-11-04T14:19:03.469Z</updated>
    
    <content type="html"><![CDATA[<p>转录组分析算是比较常见的生物信息分析内容，加之最近确实有课题与之相关，无论如何，花些时间自己做一遍增加理解也可以接受.<a id="more"></a><br>1.DESeq2的安装<br>source(“<a href="https://bioconductor.org/biocLite.R&quot;" target="_blank" rel="noopener">https://bioconductor.org/biocLite.R&quot;</a>)<br>biocLite(“DESeq2”)<br>2.读取数据</p><pre><code>library(DESeq2)data&lt;-read.table(&quot;W_H_S_30min.readcount.txt&quot;,header=T,row.names=1)head(data)</code></pre><p>design&lt;-rep(c(“W10”,”H10”,”S10”,”W30”,”H30”,”S30”,”W60”,”H60”,”S60”,”W240”,”H240”,”S240”),each=3)#3类处理，9个样本</p><p>3.构建dds对象<br>colData &lt;- data.frame(row.names=colnames(data),group_list=design)<br>dds &lt;- DESeqDataSetFromMatrix(countData = data,colData = colData,design = ~group_list)<br>4.做normalization<br>dds2 &lt;- DESeq(dds)<br>5.提取数据<br>res &lt;-  results(dds2, contrast=c(“group_list”,”S30”,”W30”))#这里提取的是S30与W30作比较<br>resOrdered &lt;- res[order(res$padj),]<br>resOrdered=as.data.frame(resOrdered)<br>head(resOrdered)<br>6.进行数据的过滤<br>要选择fold change大于4，padj小于0.05|0.01的基因<br>final.res <- na.omit(resordered[abs(resordered$log2foldchange)>2 &amp; resOrdered$padj&lt;0.01,])<br>write.table(final.res,”S30_W30_Sigene.txt”,sep=”\t”)</-></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转录组分析算是比较常见的生物信息分析内容，加之最近确实有课题与之相关，无论如何，花些时间自己做一遍增加理解也可以接受.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>转录组分析之--GO和pathway富集分析</title>
    <link href="https://huans.github.io/2018/03/05/GO%E5%92%8Cpathway%E5%AF%8C%E9%9B%86%E5%88%86%E6%9E%90/"/>
    <id>https://huans.github.io/2018/03/05/GO和pathway富集分析/</id>
    <published>2018-03-05T15:49:11.688Z</published>
    <updated>2018-03-05T15:50:47.981Z</updated>
    
    <content type="html"><![CDATA[<p>再也不是任何意义上的闲来无事了，迫不得已要自己重新分析转录组数据，虽然这套流程在学界早已非常成熟，但对于新手来说每一步并不是想象的那么简单，特别是对于非模式生物的各类数据分析。简单记录一下自认为值得注意的地方。<a id="more"></a></p><p>1.GO富集分析<br>本来按照实验室的传统，用Blast2GO来做GO分析，不巧的是申请到的Blast2GO一周的试用期刚好与春节假期重叠。白白浪费掉了。不得已去找另一个工具<a href="http://wego.genomics.org.cn/" target="_blank" rel="noopener">WeGo</a>。这里说明一下，我的输入文件是已经被注释好的Gene-GO号。所以能直接使用Wego，如果是原始的fasta格式的序列文件，Wego是无能为力的。</p><p>2.pathway富集分析<br>说到这个，就有点勾起痛苦的回忆了，<a href="http://wego.genomics.org.cn/" target="_blank" rel="noopener">Kobas</a>无疑是一款运用非常广泛的KEGG富集分析软件，但不巧的是就刚好在哪几天Kobas的官网打不开！据了解，截止到目前（3/5/2018）这个网站还是不能正常使用。</p><p>以下全是废话：~~</p><p>好在我在实验室的服务器上找到了Kobas2.0本地版，坑爹的事情再次发生，无论如何软件不能调用，环境变量改了又改，都不行。听师兄说大实验室目录下安装了Kobas3.0，久旱逢甘雨，何况我又是一个对于软件用新不用旧的人。等我兴冲冲调用3.0的时候，坑爹的事情还在继续发生，首先是任然不能正常调用，总是报一些有的没得看不懂的错误，一会儿是找不到module，一会儿是rpy2包出问题什么的。然后咨询了管理员，很不幸，他用自己的账号可以正常调用，师兄也可以正常调用，更不幸的是管理员登我的账号也可以调用！我是一个始终不会轻易认输的人，更别说在这种“羞辱”的情况下，不知道这样的性格是好是坏，但至少它让我浪费了不少时间在这种别人看来鸡毛蒜皮的小事上。直到问题解决的时候，前前后后一天半已经过去了，具体的原因是由于我之前安装了miniconda，调用python的时候是默认在miniconda的文件夹下面的，问题就在这个python的路径上，其实之前我已经想到了是环境变量的问题，所以把通过miniconda安装的所有软件和库都注释了，但是每次调用python发现都是在miniconda的文件下，最终我把miniconda的路径索性也注释了，果然 it works。。</p><p>废话不多说了，kobas的用法大致是这样</p><pre><code>Usage: run_kobas.py [-l] -i infile [-t intype] -s species [-E evalue] [-R rank] [-N nCPUs] [-C coverage] [-Z ortholog] [-b bgfile] [-d database] [-m method] [-n fdr] [-o outfile] [-c cutoff] [-k kobas_home] [-v blast_home] [-y blastdb] [-q kobasdb] [-p blastp] [-x blastx]</code></pre><p>其中需要特别准备的是这个输入文件，我们看到输入文件中ID的支持类型是这样的：</p><pre><code>-t INTYPE, --intype=INTYPE                      input type (fasta:pro, fasta:nuc, blastout:xml,                      blastout:tab, id:refseqpro, id:uniprot, id:ensembl,                      id:ncbigene), default fasta:pro</code></pre><p>所以就着手准备ID，我手上只有棉花在拟南芥中注释的同源基因的信息（TAIR），并没有ENTREz ID（ncbigene）信息，现在要把TAIR转换成ENTREz，各种艰辛在此不表，最终找到了<a href="http://www.bioconductor.org/packages/release/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html" target="_blank" rel="noopener">clusterProfiler</a>这个包，这个包中函数bitr()可以执行ID转换。至于为什么不用clusterProfiler做GO和Pathway富集分析，我想那又是一个非常悲伤的故事，大约也和环境配置有关吧。。</p><p>接下来看这个包是怎么转换的，</p><pre><code>x &lt;- c(&quot;GPX3&quot;,  &quot;GLRX&quot;,   &quot;LBP&quot;,   &quot;CRYAB&quot;, &quot;DEFB1&quot;, &quot;HCLS1&quot;,   &quot;SOD2&quot;,   &quot;HSPA2&quot;,       &quot;ORM1&quot;,  &quot;IGFBP1&quot;, &quot;PTHLH&quot;, &quot;GPC3&quot;,  &quot;IGFBP3&quot;,&quot;TOB1&quot;,    &quot;MITF&quot;,   &quot;NDRG1&quot;,       &quot;NR1H4&quot;, &quot;FGFR3&quot;,  &quot;PVR&quot;,   &quot;IL6&quot;,   &quot;PTPRM&quot;, &quot;ERBB2&quot;,   &quot;NID2&quot;,   &quot;LAMB1&quot;,       &quot;COMP&quot;,  &quot;PLS3&quot;,   &quot;MCAM&quot;,  &quot;SPP1&quot;,  &quot;LAMC1&quot;, &quot;COL4A2&quot;,  &quot;COL4A1&quot;, &quot;MYOC&quot;,       &quot;ANXA4&quot;, &quot;TFPI2&quot;,  &quot;CST6&quot;,  &quot;SLPI&quot;,  &quot;TIMP2&quot;, &quot;CPM&quot;,     &quot;GGT1&quot;,   &quot;NNMT&quot;,       &quot;MAL&quot;,   &quot;EEF1A2&quot;, &quot;HGD&quot;,   &quot;TCN2&quot;,  &quot;CDA&quot;,   &quot;PCCA&quot;,    &quot;CRYM&quot;,   &quot;PDXK&quot;,       &quot;STC1&quot;,  &quot;WARS&quot;,  &quot;HMOX1&quot;, &quot;FXYD2&quot;, &quot;RBP4&quot;,   &quot;SLC6A12&quot;, &quot;KDELR3&quot;, &quot;ITM2B&quot;)eg = bitr(x, fromType=&quot;SYMBOL&quot;, toType=&quot;ENTREZID&quot;, OrgDb=&quot;org.Hs.eg.db&quot;)head(eg)##   SYMBOL ENTREZID## 1   GPX3     2878## 2   GLRX     2745## 3    LBP     3929## 4  CRYAB     1410## 5  DEFB1     1672## 6  HCLS1     3059</code></pre><p>具体用法<a href="http://www.bioconductor.org/packages/release/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html#bitr_kegg-converting-biological-ids-using-kegg-api" target="_blank" rel="noopener">参见此处</a></p><p>有了ID，一切都好说了</p><pre><code>run_kobas.py  -i infile -t intype -s species -d database -o outfile</code></pre><p>Kobas到这里的用法基本结束了，下一章节带来灰常赤鸡的WGCNA的使用说明~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再也不是任何意义上的闲来无事了，迫不得已要自己重新分析转录组数据，虽然这套流程在学界早已非常成熟，但对于新手来说每一步并不是想象的那么简单，特别是对于非模式生物的各类数据分析。简单记录一下自认为值得注意的地方。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用Hexo+github简单搭建一个blog</title>
    <link href="https://huans.github.io/2017/12/19/First-blog/"/>
    <id>https://huans.github.io/2017/12/19/First-blog/</id>
    <published>2017-12-19T02:43:33.179Z</published>
    <updated>2017-12-19T02:43:49.485Z</updated>
    
    <content type="html"><![CDATA[<p>发现Github这个网站大概是在一年前了，由于某些原因，在课题开展的过程中或多或少的会需要用到一些用的计算机相关知识，偶然间发现Github这个网站，上面分享了非常多实用的，有趣的工具，刚开始觉得特别的炫酷（现在也是），后来就花了很短时间慢慢研究了一下，估摸着还算不上浅尝辄止，<a id="more"></a>直到昨天晚上在看些大牛的博客的时候才突然来了兴致想要搭建一个自己的网站，于是顺理成章地想起Github。Github的功能和特色在此不再赘述，写这篇文章也主要是记录一下耗时近七八个小时的学习过程。如果它能对后来的人有什么启示，那就更有意义了。</p><h2 id="注：文章部分内容转自网络，链接在文章最后，感谢作者无私分享，过程中同样得到了师兄的帮助。"><a href="#注：文章部分内容转自网络，链接在文章最后，感谢作者无私分享，过程中同样得到了师兄的帮助。" class="headerlink" title="注：文章部分内容转自网络，链接在文章最后，感谢作者无私分享，过程中同样得到了师兄的帮助。"></a>注：文章部分内容转自网络，链接在文章最后，感谢作者无私分享，过程中同样得到了<a href="http://tiramisutes.github.io/" target="_blank" rel="noopener">师兄</a>的帮助。</h2><p>##基本步骤<br>1.注册github账号，新建一个仓库<br>2.安装、配置Hexo<br>3.安装、配置git<br>4.发布文章<br>5.选择主题</p><p>##1.注册github账号，新建仓库<br>进入<a href="https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。" target="_blank" rel="noopener">https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。</a></p><p>这些都比较简单，没有遇到任何阻碍。<br>接着就是创建仓库，如图所示，也比较简单。</p><p>##2.安装Hexo<br>配置Node.js环境<br>下载Node.js安装文件：<br>Windows Installer 32-bit<br>Windows Installer 64-bit<br>根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧- -。<br>保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口：<br>在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~） 在打开的命令行界面中，输入<br>node -v<br>npm -v</p><p>配置Git环境</p><p>下载Git安装文件：<br>GIt官网下载地址：<br>Git-2.6.3-64-bit.exe<br>然后就进入了Git的安装界面，<br>和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：</p><p>Git PATH设置</p><p>一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：<br>git –version<br>在E盘目录下创建Hexo文件夹（在哪个盘无特殊要求），并在命令行的窗口进入到该目录<br>在命令行中输入：<br>npm install hexo-cli -g<br>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入<br>npm install hexo –save<br>然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：<br>hexo -v<br>如果你看到了如图文字，则说明已经安装成功了。</p><p>初始化Hexo<br>接着上面的操作，输入：<br>hexo init<br>然后输入：<br>npm install<br>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。<br>注意：这个步骤需要空文件夹，所以你需要在此之间新建一个文件夹，位置暂时没发现有什么特殊要求</p><p>首次体验Hexo<br>继续操作，同样是在命令行中，输入：<br>hexo g<br>然后输入：<br>hexo s<br>然后会提示：<br>INFO Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.<br>在浏览器中打开<a href="http://localhost:4000/，你将会看到配置完成以后页面" target="_blank" rel="noopener">http://localhost:4000/，你将会看到配置完成以后页面</a><br>到目前为止，Hexo在本地的配置已经全都结束了。</p><p>下面会讲解怎样将Hexo与github page 联系起来</p><p>##3.连接本地git和Github</p><p>1、设置Git的user name和email：(如果是第一次的话)</p><p>git config –global user.name “xujun”<br>git config –global user.email “<a href="mailto:gdutxiaoxu@163.com" target="_blank" rel="noopener">gdutxiaoxu@163.com</a>“<br>2、生成密钥<br> ssh-keygen -t rsa -C “<a href="mailto:gdutxiaoxu@163.com" target="_blank" rel="noopener">gdutxiaoxu@163.com</a>“<br>一直按Enter键就好了，最终生成密钥文件具体路径在~/.ssh中，打开文件复制其中的key到下图中<br>配置Deployment<br>同样在_config.yml文件中，找到Deployment，然后按照如下修改：<br>deploy:<br>  type: git<br>  repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yourname/yourname.github.io.git<br>  branch: master<br>比如我的仓库的地址是<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:gdutxiaoxu/gdutxiaoxu.github.io.git，所以配置如下<br>deploy:<br>  type: git<br>  repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:gdutxiaoxu/gdutxiaoxu.github.io.git<br>  branch: master</p><p>注意：此处冒号（：）后必须要有空格，不然就会报错了</p><p>写博客、发布文章</p><p>新建一篇博客，执行下面的命令：</p><p>hexo new post “article title”</p><p>这时候在我的 电脑的目录下 F:\hexo\source\ _posts 将会看到 article title.md 文件<br>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p><p>hexo g   // 生成<br>hexo d   // 部署<br>当然你也可以执行下面的命令，相当于上面两条命令的效果<br>hexo d -g #在部署前先生成<br>部署成功后访问 你的地址，<a href="https://yourName.github.io（这里输入我的地址：" target="_blank" rel="noopener">https://yourName.github.io（这里输入我的地址：</a> <a href="https://gdutxiao.github.io" target="_blank" rel="noopener">https://gdutxiao.github.io</a> ),将可以看到生成的文章。</p><p>踩坑提醒</p><p>1）注意需要提前安装一个扩展：<br>npm install hexo-deployer-git –save</p><p>##4.主题选择<br>1）安装 NexT<br>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p><p>下载主题</p><p>如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。</p><p>克隆最新版本<br>下载稳定版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</p><p>cd your-hexo-site<br>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p><p>2）启用主题</p><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。</p><p>启用 NexT 主题</p><p>theme: next<br>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。</p><p>3）验证主题</p><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p><p>INFO Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.<br>此时即可使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，检查站点是否正确运行。</p><p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p><p>参考：手把手教你用Hexo+Github 搭建属于自己的博客(<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">http://blog.csdn.net/gdutxiaoxu/article/details/53576018</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现Github这个网站大概是在一年前了，由于某些原因，在课题开展的过程中或多或少的会需要用到一些用的计算机相关知识，偶然间发现Github这个网站，上面分享了非常多实用的，有趣的工具，刚开始觉得特别的炫酷（现在也是），后来就花了很短时间慢慢研究了一下，估摸着还算不上浅尝辄止，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>连锁分析与关联分析的区别</title>
    <link href="https://huans.github.io/2017/12/18/QTL/"/>
    <id>https://huans.github.io/2017/12/18/QTL/</id>
    <published>2017-12-18T14:19:07.000Z</published>
    <updated>2017-12-19T02:35:46.608Z</updated>
    
    <content type="html"><![CDATA[<p>近来在学习基于SNP标记的关联分析相关的内容，对于GWAS与基于连锁遗传的QTL定位之间有什么本质区别一直有点迷迷糊糊，从网上看到了一篇<a href="https://1rcloud.net/bbs/topics/174" target="_blank" rel="noopener">文章</a>，感觉部分地解决了疑惑。<a id="more"></a></p><p>##连锁分析<br>连锁分析（linkage analysis）：是<strong>基于家系</strong>研究的一种方法，它利用连锁的原理研究潜在致病基因与待检测标记基因之间的关系，<strong>来判断待检测标记基因是否一起与潜在致病基因由父代遗传给子代</strong>。<br>　　如果同一染色体上的致病基因与待检测基因不连锁，待检测基因将独立于潜在致病基因遗传给下一代，此时待检测标记基因与潜在致病基因位于同一染色体或不同单倍体的几率各一半，否则标明两者之间存在连锁遗传。连锁分析特别适合于单基因疾病的遗传研究，对于复杂疾病的研究具有很大局限性。</p><p>重组（recombination）：遗传学上将产生重组配子的现象称为重组。通常采用重组率θ（即重组配子单体型占子代所有配子单体型的比重）描述重组事件的强度，它反映了亲代产生重组体后代的概率。<br>在连锁分析中，认为θ：</p><p>θ≤0.10 紧密连锁<br>0.1~0.2中度连锁<br>θ≥0.20松弛连锁<br>重组率的大小与等位基因间距离成正比。相对而言，距离较远的基因间发生重组的概率大一些，距离较近的则倾向于出现连锁遗传，形成与亲代相同的非重组配子。</p><p>一般而言，互换和重组只针对同源染色体的两个等位基因，非同源染色体的等位基因间较少发生互换和重组。孟德尔定律是连锁遗传的统计方法基础。</p><p>###连锁分析的两个阶段：<br>参数连锁分析：为经典连锁分析，适用于以孟德尔传递方式遗传的单基因疾病，目的是检验一个或多个遗传标记与疾病易感基因间<strong>是否存在连锁遗传现象以及在连锁状态下的重组率</strong>。参数连锁分析最常用的方法是优势对数计分法（log odds score method，LOD）。<br>非参数连锁分析：是一种不需要事先确定疾病或性状遗传模式的方法，分析复杂疾病的连锁分析时有一定优势。 按分析手段不同可将非参数连锁分析分为： 基于血缘一致（identity by descent，IBD） 基于状态一致（identity by state，IBS） 按分析对象不同可分为： 受累同胞对法（最常用） 受累亲属对法 寻找明显差异的同胞对法</p><p>##关联分析<br>关联分析（association analysis）是一种用来分析标记位点的待检测等位基因与疾病易感基因间是否存在关系的分析方法，是在对候选基因进行初步定位或精细定位的基础上，分析候选基因与复杂疾病或数量性状的关系，达到排除不相关基因的目的。</p><p>##连锁分析与关联分析的区别：</p><p><strong>连锁分析需要在家系中检验等位基因与疾病或者性状间是否为连锁遗传，而关联分析检验群体中疾病或者性状和等位基因间是否存在相关性。</strong>在复杂疾病的分析中，关联分析比连锁分析更为优越。</p><p>关联分析的基础是连锁不平衡。常用的方法是基于群体数据的关联分析和基于家庭数据的关联分析及传递不平衡检验。</p><p>关联分析通常需要同时进行多重假设检验。随着遗传位点数量的增多，同一样本中进行的统计检验次数也随之增多，进而造成假阳性率（Ⅰ类错误）升高。校正的方法有多种，如Bonferroni方法、FDR方法等。</p><p>关联分析在疾病基因定位研究领域的应用：</p><p>候选位点关联研究<br>候选基因关联研究<br>候选位点精细定位的关联研究<br>全基因组关联研究（genome wide association study，GWAS）</p><p>##总结<br>连锁分析是在家系中计算标记与基因是否连锁，通过重组率计算他们的相对位置，从而确定基因所在的候选区间，但是因为家系的重组次数很少，即便标记非常密集，也很难得到较小的区间。关联分析是检验标记与性状之间是否存在相关性，基于连锁不平衡，确定显著位点周围的区域为候选基因区域，标记越密集，精度越高，甚至直接定位到基因本身，但受到群体结构的影响，这样的显著位点可能存在假阳性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来在学习基于SNP标记的关联分析相关的内容，对于GWAS与基于连锁遗传的QTL定位之间有什么本质区别一直有点迷迷糊糊，从网上看到了一篇&lt;a href=&quot;https://1rcloud.net/bbs/topics/174&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;，感觉部分地解决了疑惑。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux下BLAST的安装与使用</title>
    <link href="https://huans.github.io/2017/12/16/blast/"/>
    <id>https://huans.github.io/2017/12/16/blast/</id>
    <published>2017-12-16T12:54:31.000Z</published>
    <updated>2017-12-19T02:36:50.908Z</updated>
    
    <content type="html"><![CDATA[<p>原本计划对几个亚洲棉基因进行blast比对寻找在陆地棉中的同源基因，但是服务器抽风了，导致计划被打乱，不过刚好也乘此机会学习和总结一下BLAST+的安装和使用。<br>本文实测环境为Linux64位系统。<a id="more"></a></p><p>##1.安装配置BLAST+<br>首先是下载程序，</p><pre><code>wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.2.30+-x64-linux.tar.gz</code></pre><p>对文件解压</p><pre><code>tar -zxvf ncbi-blast-2.2.30+-x64-linux.tar.gz</code></pre><p>为了方便管理，更喜欢将其移至我的本地安装目录中</p><pre><code>mv ncbi-blast-2.2.30+ ~/local/app/ # 移动cd ~/local/app/                    # 进入本地程序安装路径mv ncbi-blast-2.2.30+ blast        # 修改目录名</code></pre><p>这样就安装到我平时安装本地软件的文件夹里了，当然和其他软件的安装方法一样，你需要将blast+的路径加入到环境变量中，方便以后的调取。</p><pre><code>echo &quot;export PATH=/db/home/shenwei/local/app/blast/bin:\$PATH&quot; &gt;&gt; ~/.bashrcsource ~/.bashrc</code></pre><p>现在一切安装工作已经就绪了</p><p>##2.配置本地的BLAST库<br>为了方便大批量的比对工作，提高工作效率，本地化库是个很好的方法。<br>建立并编辑BLAST全局配置文件</p><pre><code>[hsi@node102 ~]$ cat .ncbirc  #内容如下[BLAST]BLASTDB=/home/hsi/blast/db</code></pre><p>这样配置的好处在于以后调用库的时候不需要写绝对路径，只输入名称就可以。</p><p>##3.准备库文件<br>因为我本地文件夹中有一套fastq格式的基因组序列，所以我直接就用本地文件，不再去下载了，这一部分就不再包括如何下载，如何更新的内容了。</p><p>FAST格式的文件不能作为库直接用于本地的blast，必须要利用makeblastdb进行格式化</p><pre><code>makeblastdb -in input_db -dbtype nucl -parse_seqids -out dbname</code></pre><p>-in: 后加输入文件<br>-dbtype: 代表数据库的类型，nucl是核酸类型，prot是蛋白质类型</p><p>如果该库需要经常使用，可将库文件移到前面配置的库文件的目录，今后在其它目录运行blast的时候，便可直接输入库名（不用输入绝对路径），直接使用。</p><pre><code>mv dbname.* ~/data/blast</code></pre><p>##4.执行BLAST</p><pre><code>blastn -query test.fa -db nt -outfmt 6 -evalue 1e-5 -out &quot;test.blastn@dbname&quot; -num_threads 8</code></pre><p>参数说明:<br>-query： 输入文件路径及文件名<br>-out：输出文件路径及文件名<br>-db：格式化了的数据库路径及数据库名<br>-outfmt：输出文件格式，总共有12种格式,6对应的是blast的m8格式<br>-evalue：设置输出结果的e-value值<br>-num_descriptions：tabular格式输出结果的条数<br>-num_threads：线程数</p><p>结果文件解读：<br>进行Blast+比对，用参数-outfmt 6可以以列表的方式输出结果，结果中从左到右每一列的意义分别是：</p><p>[00] Query id</p><p>[01] Subject id</p><p>[02] % identity</p><p>[03] alignment length</p><p>[04] mismatches</p><p>[05] gap openings</p><p>[06] q. start</p><p>[07] q. end</p><p>[08] s. start</p><p>[09] s. end</p><p>[10] e-value</p><p>[11] bit score</p><p>核酸序列比对核酸数据库（blastn）以及核酸序列比对蛋白数据库（blastx）<br>与上面的blastp用法类似：</p><pre><code>blastn -query seq.fasta -out seq.blast -db dbname -outfmt 6 -evalue 1e-5 -num_descriptions 10 -num_threads 8blastx -query seq.fasta -out seq.blast -db dbname -outfmt 6 -evalue 1e-5 -num_descriptions 10 -num_threads 8</code></pre><p>详情请参考<a href="https://www.ncbi.nlm.nih.gov/books/NBK279690/" target="_blank" rel="noopener">《BLAST® Command Line Applications User Manual》</a>，<a href="http://www.yelinsky.com/blog/archives/421.html" target="_blank" rel="noopener">BLAST+使用方法</a>，<a href="http://blog.shenwei.me/local-blast-installation/" target="_blank" rel="noopener">《Linux系统中NCBI BLAST+本地化教程》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原本计划对几个亚洲棉基因进行blast比对寻找在陆地棉中的同源基因，但是服务器抽风了，导致计划被打乱，不过刚好也乘此机会学习和总结一下BLAST+的安装和使用。&lt;br&gt;本文实测环境为Linux64位系统。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Disqus使用及报错处理</title>
    <link href="https://huans.github.io/2017/12/14/Disqus%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>https://huans.github.io/2017/12/14/Disqus使用及报错处理/</id>
    <published>2017-12-14T14:11:37.367Z</published>
    <updated>2017-12-14T14:11:41.173Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚接触评论系统，上网一搜发现普遍采用的第三方评论系统“多说”已经在今年6月阵亡了。幸好我的主题还能够支持另外一种评论系统——Disqus。目前这个博客使用apollo主题搭建，支持Disqus和duoshuo系统，尽管想要做的简洁一些，<a id="more"></a>但是不把评论系统加上去心里总是不太舒服，于是就着手开干。事情永远没有想象的顺利，所以才有了这篇文章。 </p><hr><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><p>第一步，到Disqus官网注册账号，支持google和Twitter还有个啥不太记得了。</p><p>第二步，填写注册的信息，其中有一项website name非常坑爹（后面再说），我用的是github的用户名，没问题</p><p>第三步， 网上很多教程都差不多顺着点就行</p><p>第四步，各种配置，也很顺利</p><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><ol><li><p>到这里一切看起来比较顺利，然而在往<strong>主题配置文件</strong>写入 disqus: your shortname 的时候出了麻烦，啥是shortname？前面好像没见过。只写了个website name。硬着头皮往上填了个website name，可想而知，不行，接连注册了好几个ID都没解决，无奈google，在官网的Q&amp;A里面找到了答案，打开账户，查看ID，此时地址栏里出现的第一个字符串（/分隔符）就是shortname，我。。。</p></li><li><p>以为事情到这就差不多了，谁曾想编译，部署文件到github后不管怎么刷新文章下面都没有评论区，以为是写入的命令有问题，结果翻来覆去改了很多遍都不行，连主题都删除重装了，没找到问题所在。偶然间本来的评论区出现如下提示：</p><p> We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.</p><p> 当时就反应过来了，命令是没错的，可能是又是该死的网络，也就没去看troubleshooting guide，当机立断翻墙了，果然不出所料，Disqus也被墙了！！！</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这代表着如果你们不会科学上网就不能给我添加评论了~~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚接触评论系统，上网一搜发现普遍采用的第三方评论系统“多说”已经在今年6月阵亡了。幸好我的主题还能够支持另外一种评论系统——Disqus。目前这个博客使用apollo主题搭建，支持Disqus和duoshuo系统，尽管想要做的简洁一些，
    
    </summary>
    
    
  </entry>
  
</feed>
